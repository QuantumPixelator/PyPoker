<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PyPoker (High-Low)</title>
    <style>
        body {
            margin: 0;
            padding: 20px;
            font-family: 'Comic Sans MS', cursive, sans-serif;
            background: linear-gradient(135deg, #0f5132 0%, #198754 100%);
            color: white;
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .game-container {
            background: rgba(0, 100, 0, 0.8);
            border: 3px solid #333;
            border-radius: 15px;
            padding: 20px;
            width: 800px;
            height: 600px;
            position: relative;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);
        }

        .money-display {
            position: absolute;
            top: 10px;
            left: 10px;
            font-size: 18px;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.8);
        }

        .deck {
            position: absolute;
            left: 50px;
            top: 50%;
            transform: translateY(-50%);
        }

        .deck-card {
            width: 60px;
            height: 90px;
            background: #1a365d;
            border: 2px solid #333;
            border-radius: 8px;
            position: absolute;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 12px;
            color: white;
        }

        .card {
            width: 80px;
            height: 120px;
            background: white;
            border: 3px solid #333;
            border-radius: 10px;
            position: absolute;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: space-between;
            padding: 8px;
            box-sizing: border-box;
            font-weight: bold;
            transition: transform 0.3s ease;
        }

        .card.flipping {
            animation: flip 0.6s ease-in-out;
        }

        @keyframes flip {
            0% { transform: scaleX(1); }
            50% { transform: scaleX(0); }
            100% { transform: scaleX(1); }
        }

        .card.back {
            background: #1a365d;
            color: white;
            justify-content: center;
        }

        .card.red { color: #dc2626; }
        .card.black { color: #000; }

        .current-card {
            left: 300px;
            top: 50%;
            transform: translateY(-50%);
        }

        .next-card {
            left: 420px;
            top: 50%;
            transform: translateY(-50%);
        }

        .message {
            position: absolute;
            top: 80px;
            left: 50%;
            transform: translateX(-50%);
            text-align: center;
            font-size: 24px;
            font-weight: bold;
            text-shadow: 3px 3px 6px rgba(0, 0, 0, 0.8);
            max-width: 700px;
            line-height: 1.3;
        }

        .message.win { color: #22c55e; }
        .message.lose { color: #ef4444; }
        .message.tie { color: #f59e0b; }
        .message.pass { color: #3b82f6; }
        .message.quit { color: #6b7280; }

        .continue-prompt {
            position: absolute;
            top: 380px;
            left: 50%;
            transform: translateX(-50%);
            font-size: 20px;
            color: #ffd700;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.8);
            animation: pulse 1.5s infinite;
            cursor: pointer;
        }

        @keyframes pulse {
            0%, 100% { opacity: 0.7; }
            50% { opacity: 1; }
        }

        .slider-container {
            position: absolute;
            top: 420px;
            left: 50%;
            transform: translateX(-50%);
            width: 300px;
        }

        .slider {
            width: 100%;
            height: 30px;
            background: white;
            border: 2px solid #333;
            border-radius: 15px;
            position: relative;
            cursor: pointer;
        }

        .slider-knob {
            width: 20px;
            height: 30px;
            background: #dc2626;
            border: 2px solid #333;
            border-radius: 10px;
            position: absolute;
            top: -1px;
            cursor: grab;
            transition: background-color 0.2s;
        }

        .slider-knob:active {
            cursor: grabbing;
            background: #991b1b;
        }

        .bet-display {
            text-align: center;
            font-size: 18px;
            font-weight: bold;
            margin-top: 10px;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.8);
        }

        .buttons {
            position: absolute;
            bottom: 100px;
            left: 50%;
            transform: translateX(-50%);
            display: flex;
            gap: 20px;
            flex-wrap: wrap;
            justify-content: center;
        }

        .btn {
            padding: 12px 24px;
            font-size: 16px;
            font-weight: bold;
            border: 2px solid #333;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.2s;
            min-width: 120px;
            text-align: center;
            text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
        }

        .btn.active {
            background: #3b82f6;
            color: white;
        }

        .btn.active:hover {
            background: #2563eb;
            transform: translateY(-2px);
        }

        .btn.inactive {
            background: #6b7280;
            color: #9ca3af;
            cursor: not-allowed;
        }

        .btn.special {
            background: #059669;
        }

        .btn.special:hover {
            background: #047857;
        }

        .btn.danger {
            background: #dc2626;
        }

        .btn.danger:hover {
            background: #b91c1c;
        }
    </style>
</head>
<body>
    <div class="game-container">
        <div class="money-display">
            <div>Your Money: $<span id="player-money">100</span></div>
            <div>Pot: $<span id="pot-money">50</span></div>
        </div>

        <div class="deck">
            <div class="deck-card" style="top: 0px; left: 0px;">DECK</div>
            <div class="deck-card" style="top: -2px; left: 5px;"></div>
            <div class="deck-card" style="top: -4px; left: 10px;"></div>
            <div class="deck-card" style="top: -6px; left: 15px;"></div>
            <div class="deck-card" style="top: -8px; left: 20px;"></div>
        </div>

        <div id="current-card" class="card current-card">
            <div class="card-value"></div>
            <div class="card-suit"></div>
        </div>

        <div id="next-card" class="card next-card back">
            <div>?</div>
        </div>

        <div id="message" class="message">
            Adjust your bet and click Higher/Lower/Pass.
        </div>

        <div id="continue-prompt" class="continue-prompt" style="display: none;">
            Click anywhere to continue
        </div>

        <div id="slider-container" class="slider-container">
            <div class="slider">
                <div id="slider-knob" class="slider-knob"></div>
            </div>
            <div class="bet-display">Bet: $<span id="bet-amount">1</span></div>
        </div>

        <div class="buttons">
            <button id="higher-btn" class="btn active">Higher</button>
            <button id="lower-btn" class="btn active">Lower</button>
            <button id="pass-btn" class="btn active">Pass</button>
            <button id="restart-btn" class="btn special" style="display: none;">Restart</button>
            <button id="quit-btn" class="btn danger">Quit</button>
        </div>
    </div>

    <script>
        class PokerGame {
            constructor() {
                this.SUITS = ['hearts', 'diamonds', 'clubs', 'spades'];
                this.VALUES = Array.from({length: 13}, (_, i) => i + 2); // 2-14
                this.VALUE_NAMES = {11: 'J', 12: 'Q', 13: 'K', 14: 'A'};
                this.SUIT_SYMBOLS = {
                    'hearts': '♥',
                    'diamonds': '♦',
                    'clubs': '♣',
                    'spades': '♠'
                };
                
                this.playerMoney = 100;
                this.pot = 50;
                this.betAmount = 1;
                this.deck = [];
                this.currentCard = null;
                this.nextCard = null;
                this.lastCards = [null, null];
                this.state = 'AWAITING_BET'; // 'AWAITING_BET', 'ANIMATING', 'SHOWING_RESULT', 'GAME_OVER'
                this.guess = null;
                this.gameOver = false;
                
                this.sliderDragging = false;
                
                this.initializeElements();
                this.initializeEventListeners();
                this.reset();
            }

            initializeElements() {
                this.elements = {
                    playerMoney: document.getElementById('player-money'),
                    potMoney: document.getElementById('pot-money'),
                    currentCard: document.getElementById('current-card'),
                    nextCard: document.getElementById('next-card'),
                    message: document.getElementById('message'),
                    continuePrompt: document.getElementById('continue-prompt'),
                    sliderContainer: document.getElementById('slider-container'),
                    sliderKnob: document.getElementById('slider-knob'),
                    betAmount: document.getElementById('bet-amount'),
                    higherBtn: document.getElementById('higher-btn'),
                    lowerBtn: document.getElementById('lower-btn'),
                    passBtn: document.getElementById('pass-btn'),
                    restartBtn: document.getElementById('restart-btn'),
                    quitBtn: document.getElementById('quit-btn')
                };
            }

            initializeEventListeners() {
                // Button clicks
                this.elements.higherBtn.addEventListener('click', () => this.makeGuess('higher'));
                this.elements.lowerBtn.addEventListener('click', () => this.makeGuess('lower'));
                this.elements.passBtn.addEventListener('click', () => this.pass());
                this.elements.restartBtn.addEventListener('click', () => this.reset());
                this.elements.quitBtn.addEventListener('click', () => this.quit());

                // Continue click
                this.elements.continuePrompt.addEventListener('click', () => this.continue());
                document.addEventListener('click', (e) => {
                    if (this.state === 'SHOWING_RESULT' && !this.gameOver) {
                        this.continue();
                    }
                });

                // Slider
                this.elements.sliderKnob.addEventListener('mousedown', (e) => {
                    this.sliderDragging = true;
                    e.preventDefault();
                });

                document.addEventListener('mousemove', (e) => {
                    if (this.sliderDragging && this.state === 'AWAITING_BET') {
                        this.updateSlider(e);
                    }
                });

                document.addEventListener('mouseup', () => {
                    this.sliderDragging = false;
                });

                // Slider click
                document.querySelector('.slider').addEventListener('click', (e) => {
                    if (this.state === 'AWAITING_BET') {
                        this.updateSlider(e);
                    }
                });
            }

            makeDeck() {
                const deck = [];
                for (const suit of this.SUITS) {
                    for (const value of this.VALUES) {
                        deck.push({value, suit});
                    }
                }
                // Shuffle
                for (let i = deck.length - 1; i > 0; i--) {
                    const j = Math.floor(Math.random() * (i + 1));
                    [deck[i], deck[j]] = [deck[j], deck[i]];
                }
                return deck;
            }

            reset() {
                this.playerMoney = 100;
                this.pot = 50;
                this.betAmount = 1;
                this.deck = this.makeDeck();
                this.currentCard = this.deck.pop();
                this.nextCard = null;
                this.lastCards = [null, null];
                this.state = 'AWAITING_BET';
                this.guess = null;
                this.gameOver = false;
                
                this.updateDisplay();
                this.showMessage("Adjust your bet and click Higher/Lower/Pass.", null);
                this.updateSliderPosition();
            }

            updateDisplay() {
                this.elements.playerMoney.textContent = this.playerMoney;
                this.elements.potMoney.textContent = this.pot;
                this.elements.betAmount.textContent = this.betAmount;
                
                this.displayCard(this.elements.currentCard, this.lastCards[0] || this.currentCard);
                
                if (this.nextCard) {
                    this.displayCard(this.elements.nextCard, this.nextCard);
                } else {
                    this.displayCardBack(this.elements.nextCard);
                }

                // Show/hide UI elements based on state
                const canBet = this.state === 'AWAITING_BET';
                this.elements.higherBtn.className = `btn ${canBet ? 'active' : 'inactive'}`;
                this.elements.lowerBtn.className = `btn ${canBet ? 'active' : 'inactive'}`;
                this.elements.passBtn.className = `btn ${canBet ? 'active' : 'inactive'}`;
                
                this.elements.sliderContainer.style.display = canBet ? 'block' : 'none';
                this.elements.continuePrompt.style.display = 
                    (this.state === 'SHOWING_RESULT' && !this.gameOver) ? 'block' : 'none';
                this.elements.restartBtn.style.display = this.state === 'GAME_OVER' ? 'block' : 'none';
            }

            displayCard(element, card) {
                if (!card) return;
                
                element.className = 'card';
                element.classList.add(this.getCardColor(card.suit));
                
                const valueName = this.VALUE_NAMES[card.value] || card.value;
                const suitSymbol = this.SUIT_SYMBOLS[card.suit];
                
                element.innerHTML = `
                    <div class="card-value">${valueName}</div>
                    <div class="card-suit">${suitSymbol}</div>
                `;
                
                if (this.currentCard.value === card.value && this.currentCard.suit === card.suit) {
                    element.classList.add('current-card');
                } else {
                    element.classList.add('next-card');
                }
            }

            displayCardBack(element) {
                element.className = 'card back next-card';
                element.innerHTML = '<div>?</div>';
            }

            getCardColor(suit) {
                return (suit === 'hearts' || suit === 'diamonds') ? 'red' : 'black';
            }

            updateSlider(event) {
                const slider = document.querySelector('.slider');
                const rect = slider.getBoundingClientRect();
                const x = Math.max(0, Math.min(rect.width, event.clientX - rect.left));
                const percentage = x / rect.width;
                
                const minBet = 1;
                const maxBet = Math.min(this.playerMoney, this.pot);
                this.betAmount = Math.max(minBet, Math.min(maxBet, Math.round(minBet + (maxBet - minBet) * percentage)));
                
                this.updateSliderPosition();
                this.elements.betAmount.textContent = this.betAmount;
            }

            updateSliderPosition() {
                const minBet = 1;
                const maxBet = Math.min(this.playerMoney, this.pot);
                const percentage = maxBet > minBet ? (this.betAmount - minBet) / (maxBet - minBet) : 0;
                const sliderWidth = 300 - 20; // slider width minus knob width
                this.elements.sliderKnob.style.left = `${percentage * sliderWidth}px`;
            }

            makeGuess(guess) {
                if (this.state !== 'AWAITING_BET') return;
                
                this.checkForReshuffle();
                this.nextCard = this.deck.pop();
                this.guess = guess;
                this.state = 'ANIMATING';
                
                // Animate card flip
                this.elements.nextCard.classList.add('flipping');
                setTimeout(() => {
                    this.displayCard(this.elements.nextCard, this.nextCard);
                    this.elements.nextCard.classList.remove('flipping');
                    this.resolveBet();
                }, 600);
            }

            pass() {
                if (this.state !== 'AWAITING_BET') return;
                
                this.checkForReshuffle();
                this.currentCard = this.deck.pop();
                this.displayCard(this.elements.currentCard, this.currentCard);
                this.showMessage("Card passed. Adjust bet.", 'pass');
            }

            resolveBet() {
                const val1 = this.currentCard.value;
                const val2 = this.nextCard.value;
                const v1Str = this.VALUE_NAMES[val1] || val1;
                const v2Str = this.VALUE_NAMES[val2] || val2;
                
                const win = (this.guess === 'higher' && val2 > val1) || 
                           (this.guess === 'lower' && val2 < val1);
                
                let message, outcomeType;
                
                if (val2 === val1) {
                    this.playerMoney -= this.betAmount * 2;
                    this.pot += this.betAmount * 2;
                    message = `Tie! You lose double: $${this.betAmount * 2}\n${v1Str} = ${v2Str}`;
                    outcomeType = 'tie';
                } else if (win) {
                    this.playerMoney += this.betAmount;
                    this.pot -= this.betAmount;
                    const comp = this.guess === 'lower' ? '>' : '<';
                    message = `You win $${this.betAmount}\n${v1Str} ${comp} ${v2Str}`;
                    outcomeType = 'win';
                } else {
                    this.playerMoney -= this.betAmount;
                    this.pot += this.betAmount;
                    const comp = this.guess === 'lower' ? '<' : '>';
                    message = `You lose $${this.betAmount}\n${v1Str} ${comp} ${v2Str}`;
                    outcomeType = 'lose';
                }

                this.lastCards = [this.currentCard, this.nextCard];
                this.state = 'SHOWING_RESULT';
                
                if (this.playerMoney <= 0 || this.pot <= 0) {
                    this.gameOver = true;
                }

                this.showMessage(message, outcomeType);
                this.updateDisplay();
            }

            continue() {
                if (this.state !== 'SHOWING_RESULT') return;
                
                if (this.gameOver) {
                    this.state = 'GAME_OVER';
                    this.showMessage("Game over!\nPress Restart or Quit.", 'quit');
                } else {
                    this.state = 'AWAITING_BET';
                    this.currentCard = this.deck.pop();
                    
